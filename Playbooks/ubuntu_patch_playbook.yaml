- hosts: all
  become: true
  tasks:

    
    # Ensure that client has enough disk size two methodes 
    - name: test for available disk space
      assert:
        that: 
           - not {{ item.mount == '/' and ( item.size_available < item.size_total - ( item.size_total|float * 0.8 ) ) }}
           - not {{ item.mount == '/var' and ( item.size_available < item.size_total - ( item.size_total|float * 0.8 ) ) }}
      with_items: ansible_mounts
      ignore_errors: yes
      register: disk_free
    - name: test for availale disk space2 
      assert:
        that:
           - {{ item.mount == / and (item.size_available >= 21474836480) }}
      with_items: ansible_mounts 
      ignore_errors: yes
      register: disk_free 
    # Filter Patches by Security/Severity/CVEs
    # apt-listbugs and apt-show-version should be installed on client servers 
     # name: Filter patches by severity
     # shell: apt-listbugs --severity serious,critical
     # register: high_severity_patches
     # changed_when: False
     # More details check here: https://access.redhat.com/support/policy/severity/
     # Add support for Errata
     # More details check here: https://access.redhat.com/articles/2130961
    - name: List available updates
      command: apt list --upgradable 
      register: apt_list_output_before
     
    # Add option for security only patches 
    # stop running applications 
    - name: List security Updates Only 
      command: sudo unattended-upgrade --dry-run -d
      register: apt-security-updates

    - name: Perform Security Updates
      command: sudo unattended-upgrade -d
      
    # Fix OS release version before patching
    - name: Perform updates from local repository
      apt:
        update_cache: yes
        upgrade: yes
        cache_valid_time: 3600
        sources_list: /path/to/local/repo

    # Add more error handiling in case of patch failure
    - name: Confirm patch
      debug: 
        msg:"Patch completed succefully"

    # Check if reboot is needed first
    - name: check if reboot is needed
      stat:
         path: /var/run/reboot-required
      register: reboot_required_file
    # reboot for vm with gr interface
    # disactivate gr interface for vms 

    - name: Reboot if required
      reboot:
      when: reboot_required_file.stat.exists == true
      reboot_timeout: 300
    

    - name: List available updates after reboot
      command: apt list --upgradable
      register: apt_list_output_after


    - name: Display hostname and IP address
      debug:
        var:
          - ansible_hostname
          - ansible_default_ipv4.address
      register: host_info


   # Clean yum/apt cache after update

    # - name: Generate and send report
    #   shell: |
    #     echo "Report for Ubuntu VM patching:" > Ubuntu_report.txt
    #     echo "Updates listed before executing patch playbook: {{ apt_list_output_before }}" >> Ubuntu_report.txt
    #     echo "Updates installed from local repo: {{ apt_list_output_after }}" >> Ubuntu_report.txt
    #     mail -s "Ubuntu VM patching report" yboukari@deloitte.fr < report.txt

    
    # Add option for CSV file generator
    - name: Generate cvs reort file
      csv:
        path: "/host_info.csv"
        delimiter: ","
        header_row: true
        fields:
          - "Hostname"
          - "IP Address"
          - "Available Updates"
          - "Security Updates"
        lines:
          - "{{ ansible_hostname }},{{ ansible_default_ipv4.address }},{{ apt_list_output_before.stdout_lines|join('\n') }},{{ apt_security_updates.stdout_lines|join('\n') }}"
      with_items: "{{ host_info.results }}"
      
     

    # Send notification/email with patch report
    - name: Notify me with pactch report


     

