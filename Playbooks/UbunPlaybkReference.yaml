- hosts: all
  become: true
  tasks:

#It is advisable to stop the critical services before you upgrade the system. 

    - name:  Task 1 - verify web/database processes are not running
      shell: if ps -eaf | egrep 'apache|http|nginx|mysql|postgresql|mariadb'|grep -v grep > /dev/null ;then echo 'process_running';else echo 'process_not_running';fi
      ignore_errors: true
      register: app_process_check

#In the following task, the play will fail on those nodes where web/database processes are running.

    - name:  Task 2 - decision point to start patching
      fail: msg="{{ inventory_hostname }} have running Application. Please stop the application processes first, then attempt patching."
      when: app_process_check.stdout == "process_running"

#In the following task(3), we check for the reboot requirement on the servers after Kernel upgrade by verifying the existence of /var/run/reboot-required file. 
#We are saving the result of stat module's output which we are going to use it to decide rebooting of the server later.
#get_md5=no â€“> This is to verify the checksum of the file using one the algorithms (sha1, sha256, sha512 etc.).

    - name: Task 4 - Check if a reboot is required after kernel update on Ubuntu/Debian servers 
      register: reboot_required_file
      stat: path=/var/run/reboot-required get_md5=no
      #when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'

#The goal of the following task is to Reboot Ubuntu systems if kernel updated and reboot required. 
#connect_timeout -> Maximum seconds to wait for a successful connection to the managed hosts before trying again.
#reboot_timeout -> Maximum seconds to wait for machine to reboot and respond to a test command.
#pre_reboot_delay -> Seconds to wait before reboot.
#post_reboot_delay -> Seconds to wait after the reboot command was successful before attempting to validate the system rebooted successfully.
#test_command -> Command to run on the rebooted host and expect success from to determine the machine is ready for further tasks.

    - name: Task 5 - Reboot Ubuntu/Debian Servers if kernel updated
      reboot:
        msg: "Rebooting Ubuntu/Debian Servers After Kernel Patching"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
      when: reboot_required_file.stat.exists and (ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian')
      register: reboot_started_ubuntu
      ignore_errors: true

#This task will ensure that after the pause of 3 minutes the systems are accessible through SSH. Here we are using local_action module. When we use this module.
#Ansible will run the module mentioned under it on the controller node. That module here is wait_for.

    - name: Task 10 - check if all the systems responding to ssh
      local_action:
        module: wait_for
          host={{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}
          port=22
          search_regex=OpenSSH
          delay=15
          timeout=300
          state=started


#Updating all packages on Ubuntu / Debian Linux Servers
    
    - name: Update apt repo and package cache
      apt:
        update_cache: yes
        force_apt_get: yes
        cache_valid_time: 3600

    - name: Upgrade all packages
      apt:
        upgrade: dist
        force_apt_get: yes

    - name: Check if a reboot is needed on all servers
      register: reboot_required_file_existence
      stat: path=/var/run/reboot-required get_md5=no

    - name: Reboot servers if kernel is updated
      reboot:
        msg: "Rebooting the servers after applying Kernel Updates"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
      when: reboot_required_file_existence.stat.exists

    - name: check if all the systems responding to ssh
      local_action:
        module: wait_for
          host={{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}
          port=22
          search_regex=OpenSSH
          delay=15
          timeout=300
          state=started

#The following tasks are for different purposes.

  #Those 2 tasks are meant to retrieve a list of packages that can be upgraded on a system and print it to the console
  #but only if the ev_security_only variable is not set to "yes".
    - name: Get packages that can be upgraded
      become: yes
      ansible.builtin.apt:
        list: upgrades
        state: latest
        update_cache: yes
      register: reg_apt_output_all
      when: ev_security_only == "no"

    - name: List packages that can be upgraded
      ansible.builtin.debug: 
        msg: "{{ reg_apt_output_all.results | map(attribute='name') | list }}"
      when: ev_security_only == "no"
    
  #Those 2 tasks are meant to retrieve a list of packages that can be upgraded on a system and print it to the console
  #but only if the ev_security_only variable is set to "yes".

    - name: Get packages that can be patched with security fixes
      become: yes
      ansible.builtin.apt:
        security: yes
        list: updates
        state: latest
        update_cache: yes
      register: reg_apt_output_secu
      when: ev_security_only == "yes"

    - name: List packages that can be patched with security fixes
      ansible.builtin.debug: 
        msg: "{{ reg_apt_output_secu.results | map(attribute='name') | list }}"
      when: ev_security_only == "yes"
      
  #Other
    - name: Task a - Update all packages to their latest version
      ansible.builtin.apt:
        name: "*"
        state: latest
    
    - name: Task b - Remove useless packages from the cache
      ansible.builtin.apt:
        autoclean: yes

  #This task ensure that only security-related packages are upgraded.
    - name: Upgrade only security-related packages
      apt:
        upgrade: security
        autoremove: yes
        autoclean: yes

    - name: Request user confirmation
      ansible.builtin.pause:
        prompt: | 
           The packages listed above will be upgraded. Do you want to continue ? 
           -> Press RETURN to continue.
           -> Press Ctrl+c and then "a" to abort.
      when: reg_apt_output_all is defined or reg_apt_output_secu is defined